---
- name: Get k3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true

- name: Set k3s installed version
  when: not ansible_check_mode and k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_k3s_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Download k3s if not installed
  when: k3s_version_output.rc != 0 or installed_k3s_version is version(k3s_version, '<')
  block:
    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: '0755'

    - name: Download K3s binary
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
        INSTALL_K3S_EXEC: "agent"
      changed_when: true

- name: Install flannel
  block:
    - name: Install wireguard native
      ansible.builtin.apt:
        name: wireguard
        state: present
      
    - name: Create flannel folder
      ansible.builtin.file:
        path: /run/flannel
        state: directory
        mode: '0755'
      
    - name: Create flannel subnet file
      ansible.builtin.template:
        src: flannel-subnet.env.j2
        dest: /run/flannel/subnet.env
        mode: '0644'


- name: Create k3s config file
  block:
    - name: Create k3s config directory
      ansible.builtin.file:
        path: /etc/rancher/k3s
        state: directory
        mode: '0755'

    - name: Create k3s config file
      ansible.builtin.template:
        src: config.yaml.j2 # We need to create this template file
        dest: /etc/rancher/k3s/config.yaml
        mode: '0644'
      register: _agent_config_result

- name: Add service environment variables
  when: extra_service_envs is defined
  ansible.builtin.lineinfile:
    path: "{{ systemd_dir }}/k3s-agent.service.env"
    line: "{{ item }}"
  with_items: "{{ extra_service_envs }}"

- name: Delete any existing token from the environment if different from the new one
  ansible.builtin.lineinfile:
    state: absent
    path: "{{ systemd_dir }}/k3s-agent.service.env"
    regexp: "^K3S_TOKEN=\\s*(?!{{ k3s_token }}\\s*$)"

- name: Add the token for joining the cluster to the environment
  no_log: true # avoid logging the server token
  ansible.builtin.lineinfile:
    path: "{{ systemd_dir }}/k3s-agent.service.env"
    line: "{{ item }}"
  with_items:
    - "K3S_TOKEN={{ k3s_token }}"

- name: Copy K3s service file
  register: k3s_agent_service
  ansible.builtin.template:
    src: "k3s-agent.service.j2"
    dest: "{{ systemd_dir }}/k3s-agent.service"
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"

- name: Enable and check K3s service
  ansible.builtin.systemd:
    name: k3s-agent
    daemon_reload: "{{ true if k3s_agent_service.changed else false }}"
    state: "{{ 'restarted' if (k3s_agent_service.changed or _agent_config_result.changed) else 'started' }}"
    enabled: true

- name: Debug
  ansible.builtin.debug:
    var: installed_k3s_version